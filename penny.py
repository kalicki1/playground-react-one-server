#!/usr/bin/env python

#-----------------------------------------------------------------------
# penny.py
# Author: Bob Dondero
#-----------------------------------------------------------------------

from database import Database
from flask import Flask, request, make_response, render_template, send_from_directory
from flask import abort, redirect
from flask.json import jsonify
from CASClient import CASClient
from sys import stderr
from os import environ

#-----------------------------------------------------------------------

import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    # Legacy Python that doesn't verify HTTPS certificates by default
    pass
else:
    # Handle target environment that doesn't support HTTPS verification
    ssl._create_default_https_context = _create_unverified_https_context

#-----------------------------------------------------------------------

APP_URL = 'http://localhost:3000'

#-----------------------------------------------------------------------

app = Flask(__name__, template_folder='.')

# Generated by os.urandom(16)
app.secret_key = b'\xcdt\x8dn\xe1\xbdW\x9d[}yJ\xfc\xa3~/'

#-----------------------------------------------------------------------

@app.route('/', methods=['GET'])
def index():
    html_code = render_template('./build/index.html')
    return make_response(html_code)
    # return Flask.make_response('<body>hello!</body>')
#-----------------------------------------------------------------------

@app.route('/build/<path:path>')
def static_files(path):
    return send_from_directory('build/', path)

#-----------------------------------------------------------------------

@app.route('/authenticate', methods=['GET'])
def authenticate():
    authResult = CASClient().authenticate()
    return jsonify(
        username=authResult['username'],
        redirect=authResult['redirect'])

#-----------------------------------------------------------------------

@app.route('/authenticate2', methods=['GET'])
def authenticate2():
    authResult = CASClient().authenticate()
    if authResult['username'] == '':
        return 'Something is badly wrong.'
    abort(redirect(APP_URL))
    #abort(redirect(request.url_root))

#-----------------------------------------------------------------------

@app.route('/searchresults', methods=['GET'])
def searchResults():

    # result_dict = CASClient().authenticate()
    # if result_dict['username'] == '':
    #     abort(redirect(APP_URL))

    author = request.args.get('author')
    if (author is None) or (author.strip() == ''):
        return ''

    database = Database()
    database.connect()
    books = database.search(author)
    database.disconnect()

    html = ''
    for book in books:
        html += book.getAuthor() + ': ' + \
            book.getTitle() + ' ($' + str(book.getPrice()) + ')\n'

    response = make_response(html)
    return response
